name: 'Manjaro Image Action'
description: 'Installs prerequisites for building Manjaro ARM on ubuntu'
inputs:
  arm-profiles-repo:
    description: 'arm-profiles to clone'
    required: false
    default: 'https://gitlab.manjaro.org/manjaro-arm/applications/arm-profiles'
  device:
    description: 'name of the device the build is for'
    required: true
  edition:
    description: 'name of the profile to build'
    required: true
  branch:
    description: 'stable (default), testing, unstable'
    required: false
    default: stable
  release-tag:
    description: 'image version'
    required: true
  overlay-repo:
    description: 'custom overlay repo'
    required: false
  img-type:
    description: 'image type: normal (default), factory'
    required: false
    default: normal
outputs:
  file-pkg:
    description: "compressed files"
    value: ${{ steps.build.outputs.file-pkg }}
  file-path:
    description: "path of the generated image"
    value: ${{ steps.build.outputs.file-path }}
  file-sha256:
    description: "checksum file for the image"
    value: ${{ steps.build.outputs.file-sha256 }}
runs:
  using: "composite"
  steps:
    -  
      name: install-build-dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt install \
          gdisk \
          zip \
          systemd-container \
          bmap-tools asciidoc \
          libarchive-tools \
          git \
          build-essential \
          cmake \
          libarchive-dev \
          pkg-config \
          libcurl4-openssl-dev \
          libgpgme-dev \
          libssl-dev \
          fakeroot \
          dh-autoreconf \
          qemu-utils \
          qemu-efi-aarch64 \
          qemu-system-arm \
          qemu-user-static \
          mktorrent \
          paperkey \
          gpg \
          ca-certificates \
          u-boot-tools
        sudo pip3 install meson
        sudo pip3 install ninja
        
        # For generic-efi support
        wget http://ports.ubuntu.com/pool/main/g/grub2-unsigned/grub-efi-arm64-bin_2.06-2ubuntu14.1_arm64.deb
        sudo dpkg -x grub-efi-arm64-bin_2.06-2ubuntu14.1_arm64.deb /
          
    - id: install-pacman
      shell: bash
      env:
        PACMAN_VERSION: 6.0.2
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
        pushd pacman
          sudo wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
          sudo tar -xvf pacman-${PACMAN_VERSION}.tar.xz
          pushd pacman-${PACMAN_VERSION}
            sudo patch -p1 -i ../pacman-sync-first-option.patch
            sudo meson --prefix=/usr \
                      --buildtype=plain \
                      -Ddoc=disabled \
                      -Ddoxygen=enabled \
                      -Dscriptlet-shell=/usr/bin/bash \
                      -Dldconfig=/usr/bin/ldconfig \
                      build
            sudo meson compile -C build
            sudo meson install -C build
          popd
          sudo install -m644 pacman.conf /etc/pacman.conf
          sudo install -m644 makepkg.conf /etc/
          sudo mkdir -p /etc/pacman.d
          sudo touch /etc/pacman.d/mirrorlist
        popd
    -
      name: setup-qemu-binfmt
      shell: bash
      run: |
        sudo wget https://gitlab.manjaro.org/packages/community/manjaro-arm-qemu-static/-/raw/master/qemu-static.conf -O /usr/lib/binfmt.d/qemu-static.conf
        sudo service systemd-binfmt restart
          
    - 
      name: install-arch-install-scripts
      shell: bash
      env:
        VERSION: 24
      run: |
        sudo wget https://github.com/archlinux/arch-install-scripts/archive/refs/tags/v${VERSION}.tar.gz -O arch-install-scripts.tar.gz
        sudo tar -xvf arch-install-scripts.tar.gz
        sudo make -C arch-install-scripts-${VERSION}
        sudo make -C arch-install-scripts-${VERSION} check
        sudo make -C arch-install-scripts-${VERSION} PREFIX=/usr install
    -
      name: install-manjaro-arm-tools
      shell: bash
      run: |
        sudo git clone https://gitlab.manjaro.org/manjaro-arm/applications/manjaro-arm-tools.git
        install_m_a_tools() {
            pkgname=manjaro-arm-tools
            sudo install -dm777 /usr/share/$pkgname/lib
            sudo install -dm777 /usr/share/$pkgname/profiles
            sudo install -d /etc/$pkgname/
            sudo install -dm777 /var/lib/$pkgname/{pkg,img,tmp,profiles}
            sudo install -dm777 /var/cache/$pkgname/{pkg/pkg-cache,img}
            sudo install -Dm755 $pkgname/lib/* /usr/share/$pkgname/lib/
            sudo install -Dm755 $pkgname/bin/* /usr/bin/
            sudo install -Dm755 $pkgname/lib/manjaro-arm-tools.conf /etc/manjaro-arm-tools/
        }
        install_m_a_tools
          
        sudo sed -i -e 's|1>/dev/null||g' /usr/share/manjaro-arm-tools/lib/functions.sh   
        sudo sed -i -e 's|1> /dev/null 2>&1||g' /usr/share/manjaro-arm-tools/lib/functions.sh
        sudo sed -i -e 's|2>/dev/null||g' /usr/share/manjaro-arm-tools/lib/functions.sh 
    - 
      name: checkout-arm-profiles
      shell: bash
      env:
        REPO: ${{ inputs.arm-profiles-repo }}
      run: |
        sudo git clone --depth 1 ${REPO} arm-profiles         
    -
      id: image-build
      shell: bash
      env:
        DEVICE: ${{ inputs.device }}
        EDITION: ${{ inputs.edition }}
        BRANCH: ${{ inputs.branch }}
        VERSION: ${{ inputs.branch }}-${{ inputs.release-tag }}
        IMGTYPE: ${{ inputs.img-type }}
      run: |
        [ "$IMGTYPE" != "factory" ] && unset IMGTYPE
        sudo mv -v $GITHUB_WORKSPACE/arm-profiles /usr/share/manjaro-arm-tools/profiles
        if [ -z ${{ inputs.overlay-repo }} ]; then 
          sudo buildarmimg -d $DEVICE -e $EDITION -v $VERSION -b $BRANCH ${IMGTYPE:+-f}
        else
          sudo buildarmimg -d $DEVICE -e $EDITION -v $VERSION -b $BRANCH -k ${{ inputs.overlay-repo }} ${IMGTYPE:+-f}
        fi
          
        ls -lasih /var/cache/manjaro-arm-tools/img
          
        FILE_PATH=$(find /var/cache/manjaro-arm-tools/img -type f -name "*.img.xz" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}')
        cp -v $FILE_PATH .
        echo "file-path=$(basename $FILE_PATH)" >> $GITHUB_OUTPUT
          
        FILE_PKG=$(find /var/cache/manjaro-arm-tools/img -type f -name "*-pkgs.txt" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}')
        cp -v $FILE_PKG ${FILE_PATH}.pkgs
        echo "file-pkg=$(basename $FILE_PKG)" >> $GITHUB_OUTPUT
    - id: hash
      shell: bash
      run: |
        echo "## calculating hashes"
        sha1sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.sha1
        sha256sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.sha256
        sha512sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.sha512
    - id: upload-prepare
      shell: bash -O extglob {0}
      run: |
        echo "upload-files=./${{ steps.image-build.outputs.file-path }}+(|.sha*|.pkgs)" >> $GITHUB_OUTPUT
        mkdir -p ${{ inputs.edition }}/${{ inputs.version }}
    - id: upload-github-release
      shell: bash -O extglob {0}
      env:
        LIMIT_MB: '2000'
      run: |
        # if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
        if [ -z "${{ inputs.release-tag }}" ]; then 
          echo "## no release tag given"
          exit 0
        fi
        echo "## github upload"

        echo ${{ github.token }} | gh auth login --with-token
        gh release create ${{ inputs.release-tag }} --title ${{ inputs.release-tag }} --repo ${{ github.repository }} --notes "automated release" --prerelease || echo "release already exists"

        GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${{ inputs.release-tag }}

        ls -lah

        if [[ -z "$(du --threshold=${LIMIT_MB}M ${{ steps.image-build.outputs.file-path }})" ]]; then
          # iso is small enough to upload already
          gh release upload ${{ inputs.release-tag }} --repo ${{ github.repository }} --clobber \
            ${{ steps.upload-prepare.outputs.upload-files }}
        else
          # iso is too big - creating a split-zip
          zip -j -s ${LIMIT_MB}m ${{ steps.image-build.outputs.file-path }}.zip ${{ steps.image-build.outputs.file-path }}
          
          REMOTE_FILES=$(find . -maxdepth 1 -name "*.z*" -exec basename {} \; | xargs -I{} echo "-w \"${GITHUB_LINK}/{}\"")
          gh release upload ${{ inputs.release-tag }} --repo ${{ github.repository }} --clobber \
            ./${{ steps.image-build.outputs.file-path }}+(.z*|.img.xz|.sha*|.pkgs|)
        fi
